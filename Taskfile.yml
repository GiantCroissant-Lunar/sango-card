version: '3'

vars:
  BUILD_DIR: ./build/nuke
  UNITY_PROJECT: ./projects/client
  OUTPUT_DIR: ./output
  NUKE_BUILD_SCRIPT: '{{if eq OS "windows"}}./build/nuke/build.ps1{{else}}./build/nuke/build.sh{{end}}'

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: "1"

tasks:
  # Default task - shows help
  default:
    desc: Show available tasks
    silent: true
    cmds:
      - task --list

  # Setup and initialization tasks
  setup:
    desc: Setup development environment (install dependencies)
    cmds:
      - task: setup:dotnet
      - task: setup:unity
      - echo "✓ Setup complete!"

  setup:dotnet:
    desc: Restore .NET dependencies for Nuke build
    dir: '{{.BUILD_DIR}}/build'
    cmds:
      - dotnet restore
    sources:
      - '{{.BUILD_DIR}}/build/_build.csproj'
    generates:
      - '{{.BUILD_DIR}}/build/obj/**/*'

  setup:unity:
    desc: Check Unity installation and project setup
    cmds:
      - echo "Checking Unity project at {{.UNITY_PROJECT}}"
      - '{{if eq OS "windows"}}if exist "{{.UNITY_PROJECT}}\ProjectSettings\ProjectVersion.txt" (type "{{.UNITY_PROJECT}}\ProjectSettings\ProjectVersion.txt") else (echo Unity project not initialized){{else}}if [ -f "{{.UNITY_PROJECT}}/ProjectSettings/ProjectVersion.txt" ]; then cat "{{.UNITY_PROJECT}}/ProjectSettings/ProjectVersion.txt"; else echo "Unity project not initialized"; fi{{end}}'

  # Clean tasks
  clean:
    desc: Clean all build artifacts
    cmds:
      - task: clean:nuke
      - task: clean:unity
      - task: clean:output

  clean:nuke:
    desc: Clean Nuke build artifacts
    dir: '{{.BUILD_DIR}}/build'
    cmds:
      - dotnet clean
      - '{{if eq OS "windows"}}if exist "bin" rmdir /s /q bin{{else}}rm -rf bin{{end}}'
      - '{{if eq OS "windows"}}if exist "obj" rmdir /s /q obj{{else}}rm -rf obj{{end}}'

  clean:unity:
    desc: Clean Unity build artifacts
    cmds:
      - echo "Cleaning Unity artifacts..."
      - '{{if eq OS "windows"}}if exist "{{.UNITY_PROJECT}}\Library" echo Skipping Library folder (too large, clean manually if needed){{else}}echo "Skipping Library folder (too large, clean manually if needed)"{{end}}'
      - '{{if eq OS "windows"}}if exist "{{.UNITY_PROJECT}}\Temp" rmdir /s /q "{{.UNITY_PROJECT}}\Temp"{{else}}rm -rf "{{.UNITY_PROJECT}}/Temp"{{end}}'
      - '{{if eq OS "windows"}}if exist "{{.UNITY_PROJECT}}\obj" rmdir /s /q "{{.UNITY_PROJECT}}\obj"{{else}}rm -rf "{{.UNITY_PROJECT}}/obj"{{end}}'

  clean:output:
    desc: Clean output directory
    cmds:
      - '{{if eq OS "windows"}}if exist "{{.OUTPUT_DIR}}" rmdir /s /q "{{.OUTPUT_DIR}}"{{else}}rm -rf "{{.OUTPUT_DIR}}"{{end}}'
      - echo "✓ Output directory cleaned"

  # Build tasks (using Nuke)
  build:
    desc: Build the project using Nuke
    cmds:
      - task: build:nuke

  build:nuke:
    desc: Run Nuke build (Compile target)
    cmds:
      - '{{.NUKE_BUILD_SCRIPT}} Compile'

  build:unity:
    desc: Build Unity project (Windows 64-bit)
    cmds:
      - '{{.NUKE_BUILD_SCRIPT}} BuildUnity --unity-build-target StandaloneWindows64'

  build:unity:android:
    desc: Build Unity project for Android
    cmds:
      - '{{.NUKE_BUILD_SCRIPT}} BuildUnity --unity-build-target Android'

  build:unity:ios:
    desc: Build Unity project for iOS
    cmds:
      - '{{.NUKE_BUILD_SCRIPT}} BuildUnity --unity-build-target iOS'

  build:unity:webgl:
    desc: Build Unity project for WebGL
    cmds:
      - '{{.NUKE_BUILD_SCRIPT}} BuildUnity --unity-build-target WebGL'

  # Test tasks
  test:
    desc: Run all tests
    cmds:
      - task: test:unity

  test:unity:
    desc: Run Unity tests
    cmds:
      - '{{.NUKE_BUILD_SCRIPT}} TestUnity'

  # Package tasks
  package:
    desc: Create Unity package
    cmds:
      - '{{.NUKE_BUILD_SCRIPT}} ExportUnityPackage'

  # Development workflow tasks
  dev:
    desc: Start development workflow (clean + restore + build)
    cmds:
      - task: clean
      - task: setup
      - task: build

  ci:
    desc: Run CI pipeline (clean + restore + build + test)
    cmds:
      - task: clean
      - task: setup
      - task: build
      - task: test

  # Utility tasks
  restore:
    desc: Restore all dependencies
    cmds:
      - task: setup:dotnet

  rebuild:
    desc: Clean and build
    cmds:
      - task: clean
      - task: build

  # Info tasks
  info:
    desc: Display project information
    silent: true
    cmds:
      - echo "╔════════════════════════════════════════════════╗"
      - echo "║         Sango Card Project Information         ║"
      - echo "╚════════════════════════════════════════════════╝"
      - echo ""
      - echo "Build Directory  → {{.BUILD_DIR}}"
      - echo "Unity Project    → {{.UNITY_PROJECT}}"
      - echo "Output Directory → {{.OUTPUT_DIR}}"
      - echo "Operating System → {{OS}}"
      - echo "Architecture     → {{ARCH}}"
      - echo ""
      - echo "Available Commands:"
      - echo "  task setup     - Setup development environment"
      - echo "  task build     - Build the project"
      - echo "  task test      - Run tests"
      - echo "  task clean     - Clean build artifacts"
      - echo "  task dev       - Complete development workflow"
      - echo "  task ci        - Run CI pipeline"
      - echo ""
      - echo "Run 'task --list' for all available tasks"

  # Watch tasks (for development)
  watch:unity:
    desc: Watch Unity project for changes (placeholder for Unity editor workflow)
    cmds:
      - echo "Open Unity Editor at {{.UNITY_PROJECT}} for live development"
      - echo "Unity Editor will handle hot-reloading automatically"

  # Nuke-specific tasks (direct passthrough)
  nuke:
    desc: Run custom Nuke target
    summary: |
      Run a custom Nuke build target
      Usage: task nuke -- <target-name> [args]
      Example: task nuke -- CleanUnity
    cmds:
      - '{{.NUKE_BUILD_SCRIPT}} {{.CLI_ARGS}}'

  # Install Task runner itself (for new developers)
  install-task:
    desc: Install Task runner (for new developers)
    cmds:
      - |
        {{if eq OS "windows"}}
          echo "Installing Task via winget..."
          winget install Task.Task
        {{else if eq OS "darwin"}}
          echo "Installing Task via Homebrew..."
          brew install go-task/tap/go-task
        {{else}}
          echo "Installing Task via snap..."
          snap install task --classic
        {{end}}
      - echo "✓ Task installed! Restart your terminal and run 'task --version' to verify"

  # Documentation tasks
  docs:
    desc: Open Task documentation
    cmds:
      - echo "Opening Task documentation index..."
      - '{{if eq OS "windows"}}start docs\task\INDEX.md{{else if eq OS "darwin"}}open docs/task/INDEX.md{{else}}xdg-open docs/task/INDEX.md{{end}}'

  docs:task:
    desc: Open complete Task guide
    cmds:
      - echo "Opening Task guide..."
      - '{{if eq OS "windows"}}start docs\task\README.md{{else if eq OS "darwin"}}open docs/task/README.md{{else}}xdg-open docs/task/README.md{{end}}'

  docs:unity:
    desc: Open Unity component documentation
    cmds:
      - echo "Opening Unity build component documentation..."
      - '{{if eq OS "windows"}}start {{.BUILD_DIR}}\build\Components\README.md{{else if eq OS "darwin"}}open {{.BUILD_DIR}}/build/Components/README.md{{else}}xdg-open {{.BUILD_DIR}}/build/Components/README.md{{end}}'
  
  docs:quick:
    desc: Open quick reference card
    cmds:
      - echo "Opening quick reference..."
      - '{{if eq OS "windows"}}start docs\task\QUICK_REFERENCE.md{{else if eq OS "darwin"}}open docs/task/QUICK_REFERENCE.md{{else}}xdg-open docs/task/QUICK_REFERENCE.md{{end}}'
