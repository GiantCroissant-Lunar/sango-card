version: '3'
vars:
  BUILD_DIR: ./build/nuke
  UNITY_PROJECT: ./projects/client
  OUTPUT_DIR: ./output
  NUKE_BUILD_SCRIPT: '{{if eq OS "windows"}}pwsh -NoProfile -ExecutionPolicy Bypass -File ./build/nuke/build.ps1{{else}}./build/nuke/build.sh{{end}}'
env:
  DOTNET_CLI_TELEMETRY_OPTOUT: "1"
tasks:
  # Default task - shows help
  default:
    desc: Show available tasks
    silent: true
    cmds:
      - task --list
  # Setup and initialization tasks

  setup:
    desc: Setup development environment (install dependencies)
    cmds:
      - task: setup:dotnet
      - task: setup:unity
      - task: setup:dotnet-tools
      - task: setup:hooks
      - echo "✓ Setup complete!"
  setup:dotnet:
    desc: Restore .NET dependencies for Nuke build
    dir: '{{.BUILD_DIR}}/build'
    cmds:
      - dotnet restore
    sources:
      - '{{.BUILD_DIR}}/build/_build.csproj'
    generates:
      - '{{.BUILD_DIR}}/build/obj/**/*'
  setup:unity:
    desc: Check Unity installation and project setup
    cmds:
      - echo "Checking Unity project at {{.UNITY_PROJECT}}"
      - '{{if eq OS "windows"}}if exist "{{.UNITY_PROJECT}}\ProjectSettings\ProjectVersion.txt" (type "{{.UNITY_PROJECT}}\ProjectSettings\ProjectVersion.txt") else (echo Unity project not initialized){{else}}if [ -f "{{.UNITY_PROJECT}}/ProjectSettings/ProjectVersion.txt" ]; then cat "{{.UNITY_PROJECT}}/ProjectSettings/ProjectVersion.txt"; else echo "Unity project not initialized"; fi{{end}}'
  setup:hooks:
    desc: Install git hooks (pre-commit framework)
    cmds:
      - |
        {{if eq OS "windows"}}
        where pre-commit >nul 2>&1 && (
          echo "Installing pre-commit hooks..."
          pre-commit install
          pre-commit install --hook-type commit-msg
          echo "✓ Pre-commit hooks installed"
        ) || (
          echo "⚠ pre-commit not found. Install with: pip install pre-commit OR uv tool install pre-commit"
          echo "  Then run: task setup:hooks"
        )
        {{else}}
        if command -v pre-commit >/dev/null 2>&1; then
          echo "Installing pre-commit hooks..."
          pre-commit install
          pre-commit install --hook-type commit-msg
          echo "✓ Pre-commit hooks installed"
        else
          echo "⚠ pre-commit not found. Install with: pip install pre-commit OR uv tool install pre-commit"
          echo "  Then run: task setup:hooks"
        fi
        {{end}}
  setup:dotnet-tools:
    desc: Install .NET code quality tools (Roslynator, JetBrains InspectCode)
    cmds:
      - |
        echo "Installing .NET code quality tools..."
        dotnet tool install -g roslynator.dotnet.cli || echo "⚠ Roslynator already installed or failed"
        dotnet tool install -g JetBrains.ReSharper.GlobalTools || echo "⚠ JetBrains tools already installed or failed"
        echo ""
        echo "Verifying installations:"
        dotnet format --version && echo "✓ dotnet format available" || echo "⚠ dotnet format not found"
        roslynator --version && echo "✓ Roslynator installed" || echo "⚠ Roslynator not found"
        jb inspectcode --version && echo "✓ JetBrains InspectCode installed" || echo "⚠ JetBrains InspectCode not found"
        echo ""
        echo "✓ .NET tools setup complete!"
  # Clean tasks

  clean:
    desc: Clean all build artifacts
    cmds:
      - task: clean:nuke
      - task: clean:unity
      - task: clean:output
  clean:nuke:
    desc: Clean Nuke build artifacts
    dir: '{{.BUILD_DIR}}/build'
    cmds:
      - dotnet clean
      - '{{if eq OS "windows"}}if exist "bin" rmdir /s /q bin{{else}}rm -rf bin{{end}}'
      - '{{if eq OS "windows"}}if exist "obj" rmdir /s /q obj{{else}}rm -rf obj{{end}}'
  clean:unity:
    desc: Clean Unity build artifacts
    cmds:
      - echo "Cleaning Unity artifacts..."
      - '{{if eq OS "windows"}}if exist "{{.UNITY_PROJECT}}\Library" echo Skipping Library folder (too large, clean manually if needed){{else}}echo "Skipping Library folder (too large, clean manually if needed)"{{end}}'
      - '{{if eq OS "windows"}}if exist "{{.UNITY_PROJECT}}\Temp" rmdir /s /q "{{.UNITY_PROJECT}}\Temp"{{else}}rm -rf "{{.UNITY_PROJECT}}/Temp"{{end}}'
      - '{{if eq OS "windows"}}if exist "{{.UNITY_PROJECT}}\obj" rmdir /s /q "{{.UNITY_PROJECT}}\obj"{{else}}rm -rf "{{.UNITY_PROJECT}}/obj"{{end}}'
  clean:output:
    desc: Clean output directory
    cmds:
      - '{{if eq OS "windows"}}if exist "{{.OUTPUT_DIR}}" rmdir /s /q "{{.OUTPUT_DIR}}"{{else}}rm -rf "{{.OUTPUT_DIR}}"{{end}}'
      - echo "✓ Output directory cleaned"
  # Build tasks (using Nuke)

  build:
    desc: Build the project using Nuke
    cmds:
      - task: build:nuke
  build:nuke:
    desc: Run Nuke build (Compile target)
    cmds:
      - '{{.NUKE_BUILD_SCRIPT}} Compile'
  build:unity:
    desc: Build Unity project (Windows 64-bit)
    cmds:
      - '{{.NUKE_BUILD_SCRIPT}} BuildUnity --unity-build-target StandaloneWindows64'
  build:unity:android:
    desc: Build Unity project for Android
    cmds:
      - '{{.NUKE_BUILD_SCRIPT}} BuildUnity --unity-build-target Android'
  build:unity:ios:
    desc: Build Unity project for iOS
    cmds:
      - '{{.NUKE_BUILD_SCRIPT}} BuildUnity --unity-build-target iOS'
  build:unity:webgl:
    desc: Build Unity project for WebGL
    cmds:
      - '{{.NUKE_BUILD_SCRIPT}} BuildUnity --unity-build-target WebGL'
  # Build preparation tasks

  build:prepare:cache:
    desc: Populate build preparation cache (safe anytime)
    summary: |
      Populate build preparation cache from code-quality project
      Usage: task build:prepare:cache [CONFIG=preparation]
      Example: task build:prepare:cache CONFIG=preparation
    vars:
      CONFIG: '{{.CONFIG | default "preparation"}}'
    cmds:
      - '{{.NUKE_BUILD_SCRIPT}} PrepareCache --PreparationConfig build/preparation/configs/{{.CONFIG}}.json'
  build:prepare:client:
    desc: Inject preparation into client (build-time only, includes git reset)
    summary: |
      Inject packages and code patches into client project
      Usage: task build:prepare:client [CONFIG=injection]
      Example: task build:prepare:client CONFIG=injection
      WARNING: This performs git reset --hard on projects/client
    vars:
      CONFIG: '{{.CONFIG | default "injection"}}'
    cmds:
      - '{{.NUKE_BUILD_SCRIPT}} PrepareClient --PreparationConfig build/preparation/configs/{{.CONFIG}}.json'
  build:prepare:restore:
    desc: Restore client to clean state (git reset)
    cmds:
      - '{{.NUKE_BUILD_SCRIPT}} RestoreClient'
  build:prepare:validate:
    desc: Validate build preparation configuration
    summary: |
      Validate preparation configuration file
      Usage: task build:prepare:validate [CONFIG=preparation]
      Example: task build:prepare:validate CONFIG=injection
    vars:
      CONFIG: '{{.CONFIG | default "preparation"}}'
    cmds:
      - '{{.NUKE_BUILD_SCRIPT}} ValidatePreparation --PreparationConfig build/preparation/configs/{{.CONFIG}}.json'
  build:prepare:dry-run:
    desc: Preview preparation changes without applying
    summary: |
      Generate dry-run report showing what would be changed
      Usage: task build:prepare:dry-run [CONFIG=preparation]
      Example: task build:prepare:dry-run CONFIG=preparation
    vars:
      CONFIG: '{{.CONFIG | default "preparation"}}'
    cmds:
      - '{{.NUKE_BUILD_SCRIPT}} GenerateReportDryRun --PreparationConfig build/preparation/configs/{{.CONFIG}}.json'
  build:prepare:verify:
    desc: Verify preparation cache contents
    summary: |
      Verify that all items from preparation config are present in the cache
      Usage: task build:prepare:verify [CONFIG=preparation]
      Example: task build:prepare:verify CONFIG=preparation
    vars:
      CONFIG: '{{.CONFIG | default "preparation"}}'
    cmds:
      - '{{if eq OS "windows"}}pwsh{{else}}pwsh{{end}} -NoProfile -ExecutionPolicy Bypass -File ./scripts/verify-preparation-cache.ps1 -ConfigPath build/preparation/configs/{{.CONFIG}}.json'
  build:prepare:cleanup:
    desc: Clean orphaned items from preparation cache
    summary: |
      Remove folders not listed in the current preparation config
      Usage: task build:prepare:cleanup [CONFIG=preparation]
      Note: Prompts for confirmation before deleting
      Example: task build:prepare:cleanup CONFIG=preparation
    vars:
      CONFIG: '{{.CONFIG | default "preparation"}}'
    cmds:
      - '{{if eq OS "windows"}}pwsh{{else}}pwsh{{end}} -NoProfile -ExecutionPolicy Bypass -File ./scripts/cleanup-preparation-cache.ps1 -ConfigPath build/preparation/configs/{{.CONFIG}}.json'
  build:prepare:cleanup-preview:
    desc: Preview what would be cleaned from cache (dry-run)
    summary: |
      Show what would be deleted without actually deleting
      Usage: task build:prepare:cleanup-preview [CONFIG=preparation]
      Example: task build:prepare:cleanup-preview CONFIG=preparation
    vars:
      CONFIG: '{{.CONFIG | default "preparation"}}'
    cmds:
      - '{{if eq OS "windows"}}pwsh{{else}}pwsh{{end}} -NoProfile -ExecutionPolicy Bypass -File ./scripts/cleanup-preparation-cache.ps1 -ConfigPath build/preparation/configs/{{.CONFIG}}.json -DryRun'
  build:prepare:cleanup-force:
    desc: Clean orphaned items from cache without confirmation
    summary: |
      Remove folders not listed in the current preparation config (no prompt)
      Usage: task build:prepare:cleanup-force [CONFIG=preparation]
      Warning: Deletes immediately without confirmation!
      Example: task build:prepare:cleanup-force CONFIG=preparation
    vars:
      CONFIG: '{{.CONFIG | default "preparation"}}'
    cmds:
      - '{{if eq OS "windows"}}pwsh{{else}}pwsh{{end}} -NoProfile -ExecutionPolicy Bypass -File ./scripts/cleanup-preparation-cache.ps1 -ConfigPath build/preparation/configs/{{.CONFIG}}.json -Force'
  build:unity:prepared:
    desc: Build Unity with full preparation workflow
    cmds:
      - '{{.NUKE_BUILD_SCRIPT}} BuildUnityWithPreparation'
  # Test tasks

  test:
    desc: Run all tests
    cmds:
      - task: test:unity
  test:unity:
    desc: Run Unity tests
    cmds:
      - '{{.NUKE_BUILD_SCRIPT}} TestUnity'
  # Package tasks

  package:
    desc: Create Unity package
    cmds:
      - '{{.NUKE_BUILD_SCRIPT}} ExportUnityPackage'
  # Development workflow tasks

  dev:
    desc: Start development workflow (clean + restore + build)
    cmds:
      - task: clean
      - task: setup
      - task: build
  ci:
    desc: Run CI pipeline (clean + restore + build + test)
    cmds:
      - task: clean
      - task: setup
      - task: build
      - task: test
  # Utility tasks

  restore:
    desc: Restore all dependencies
    cmds:
      - task: setup:dotnet
  rebuild:
    desc: Clean and build
    cmds:
      - task: clean
      - task: build
  # Info tasks

  info:
    desc: Display project information
    silent: true
    cmds:
      - echo "╔════════════════════════════════════════════════╗"
      - echo "║         Sango Card Project Information         ║"
      - echo "╚════════════════════════════════════════════════╝"
      - echo ""
      - echo "Build Directory  → {{.BUILD_DIR}}"
      - echo "Unity Project    → {{.UNITY_PROJECT}}"
      - echo "Output Directory → {{.OUTPUT_DIR}}"
      - echo "Operating System → {{OS}}"
      - echo "Architecture     → {{ARCH}}"
      - echo ""
      - echo "Available Commands:"
      - echo "  task setup     - Setup development environment"
      - echo "  task build     - Build the project"
      - echo "  task test      - Run tests"
      - echo "  task clean     - Clean build artifacts"
      - echo "  task dev       - Complete development workflow"
      - echo "  task ci        - Run CI pipeline"
      - echo ""
      - echo "Run 'task --list' for all available tasks"
  # Watch tasks (for development)

  watch:unity:
    desc: Watch Unity project for changes (placeholder for Unity editor workflow)
    cmds:
      - echo "Open Unity Editor at {{.UNITY_PROJECT}} for live development"
      - echo "Unity Editor will handle hot-reloading automatically"
  # Nuke-specific tasks (direct passthrough)

  nuke:
    desc: Run custom Nuke target
    summary: |
      Run a custom Nuke build target
      Usage: task nuke -- <target-name> [args]
      Example: task nuke -- CleanUnity
    cmds:
      - '{{.NUKE_BUILD_SCRIPT}} {{.CLI_ARGS}}'
  # Install Task runner itself (for new developers)

  install-task:
    desc: Install Task runner (for new developers)
    cmds:
      - |
        {{if eq OS "windows"}}
          echo "Installing Task via winget..."
          winget install Task.Task
        {{else if eq OS "darwin"}}
          echo "Installing Task via Homebrew..."
          brew install go-task/tap/go-task
        {{else}}
          echo "Installing Task via snap..."
          snap install task --classic
        {{end}}
      - echo "✓ Task installed! Restart your terminal and run 'task --version' to verify"
  # Documentation tasks

  docs:
    desc: Open Task documentation
    cmds:
      - echo "Opening Task documentation index..."
      - '{{if eq OS "windows"}}start docs\task\INDEX.md{{else if eq OS "darwin"}}open docs/task/INDEX.md{{else}}xdg-open docs/task/INDEX.md{{end}}'
  docs:task:
    desc: Open complete Task guide
    cmds:
      - echo "Opening Task guide..."
      - '{{if eq OS "windows"}}start docs\task\README.md{{else if eq OS "darwin"}}open docs/task/README.md{{else}}xdg-open docs/task/README.md{{end}}'
  docs:unity:
    desc: Open Unity component documentation
    cmds:
      - echo "Opening Unity build component documentation..."
      - '{{if eq OS "windows"}}start {{.BUILD_DIR}}\build\Components\README.md{{else if eq OS "darwin"}}open {{.BUILD_DIR}}/build/Components/README.md{{else}}xdg-open {{.BUILD_DIR}}/build/Components/README.md{{end}}'
  docs:quick:
    desc: Open quick reference card
    cmds:
      - echo "Opening quick reference..."
      - '{{if eq OS "windows"}}start docs\task\QUICK_REFERENCE.md{{else if eq OS "darwin"}}open docs/task/QUICK_REFERENCE.md{{else}}xdg-open docs/task/QUICK_REFERENCE.md{{end}}'
  # Documentation health checks

  docs:check:
    desc: Check documentation health (scattered docs, front-matter)
    cmds:
      - pwsh -NoProfile -ExecutionPolicy Bypass -File scripts/check-docs.ps1
  docs:check:fix:
    desc: Auto-fix scattered documentation (moves to docs/_inbox/)
    cmds:
      - pwsh -NoProfile -ExecutionPolicy Bypass -File scripts/check-docs.ps1 -Fix
  docs:check:report:
    desc: Generate HTML documentation health report
    cmds:
      - pwsh -NoProfile -ExecutionPolicy Bypass -File scripts/check-docs.ps1 -Report
  docs:validate:
    desc: Validate documentation front-matter and registry
    cmds:
      - python scripts/docs_validate.py
  # Linting and formatting tasks

  lint:
    desc: Run all linters (same as pre-commit hooks)
    cmds:
      - task: lint:all
  lint:all:
    desc: Run all pre-commit hooks on all files
    cmds:
      - pre-commit run --all-files
  lint:staged:
    desc: Run pre-commit hooks on staged files only
    cmds:
      - pre-commit run
  lint:markdown:
    desc: Lint markdown files
    cmds:
      - pre-commit run markdownlint --all-files
  lint:yaml:
    desc: Lint YAML files
    cmds:
      - pre-commit run yamllint --all-files
  lint:secrets:
    desc: Check for secrets and sensitive data
    cmds:
      - pre-commit run detect-secrets --all-files
      - pre-commit run gitleaks --all-files
  lint:csharp:
    desc: Check C# partial class patterns (R-CODE-090)
    cmds:
      - pre-commit run partial-class-interface-separation --all-files
  lint:dotnet:
    desc: Run all .NET code quality checks (format, Roslynator, InspectCode)
    cmds:
      - task: lint:dotnet:format
      - task: lint:dotnet:roslynator
      - task: lint:dotnet:inspectcode
  lint:dotnet:format:
    desc: Check C# code formatting with dotnet format
    cmds:
      - pre-commit run dotnet-format --all-files
  lint:dotnet:roslynator:
    desc: Analyze C# code with Roslynator
    cmds:
      - pre-commit run roslynator --all-files
  lint:dotnet:inspectcode:
    desc: Analyze C# code with JetBrains InspectCode
    cmds:
      - pre-commit run inspectcode --all-files
  lint:dotnet:inspectcode:direct:
    desc: Run JetBrains InspectCode directly (bypasses pre-commit hook)
    vars:
      SOLUTION: '{{.SOLUTION | default "dotnet/SangoCard.sln"}}'
      OUTPUT: '{{.OUTPUT | default ".inspectcode-temp/inspect-results.xml"}}'
      FORMAT: '{{.FORMAT | default "Xml"}}'
      SEVERITY: '{{.SEVERITY | default "WARNING"}}'
    cmds:
      - echo "Running JetBrains InspectCode on {{.SOLUTION}}..."
      - mkdir -p .inspectcode-temp
      - jb inspectcode {{.SOLUTION}} --output={{.OUTPUT}} --format={{.FORMAT}} --severity={{.SEVERITY}} --build
      - echo "✓ InspectCode analysis complete. Report saved to {{.OUTPUT}}"
  format:
    desc: Auto-fix formatting issues (markdown, YAML, whitespace)
    cmds:
      - task: format:all
  format:all:
    desc: Run all auto-fixable pre-commit hooks
    cmds:
      - pre-commit run trailing-whitespace --all-files
      - pre-commit run end-of-file-fixer --all-files
      - pre-commit run mixed-line-ending --all-files
      - pre-commit run markdownlint --all-files
      - pre-commit run yamlfmt --all-files
  format:markdown:
    desc: Auto-fix markdown formatting
    cmds:
      - pre-commit run markdownlint --all-files
  format:yaml:
    desc: Auto-format YAML files
    cmds:
      - pre-commit run yamlfmt --all-files
  format:dotnet:
    desc: Auto-fix C# code formatting with dotnet format
    cmds:
      - pre-commit run dotnet-format --all-files
  check:
    desc: Run all checks (lint + validate + docs check)
    cmds:
      - task: lint:all
      - task: docs:check
      - echo "✓ All checks passed!"
