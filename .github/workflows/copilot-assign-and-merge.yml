# Copilot Auto-Assign and Auto-Merge Workflow
# Based on working patterns from ApprenticeGC/ithome-ironman-2025
# This workflow assigns issues to GitHub Copilot and auto-merges approved PRs

name: Copilot Assign and Auto-Merge

on:
  issues:
    types: [labeled]
  pull_request:
    types: [opened, synchronize]
  pull_request_review:
    types: [submitted]
  check_suite:
    types: [completed]

permissions:
  contents: write
  issues: write
  pull-requests: write
  checks: read

jobs:
  # Job 1: Assign issue to Copilot when labeled as wave-ready
  assign-to-copilot:
    if: |
      github.event_name == 'issues' &&
      github.event.action == 'labeled' &&
      contains(github.event.label.name, 'wave-') &&
      contains(github.event.label.name, '-ready')
    runs-on: ubuntu-latest
    steps:
      - name: Check dependencies met
        id: check-deps
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const body = issue.body;

            // Extract blocked_by from issue body
            const blockedByMatch = body.match(/blocked_by: \[(.*?)\]/);
            if (!blockedByMatch) {
              return true; // No dependencies
            }

            const blockedBy = blockedByMatch[1]
              .split(',')
              .map(t => t.trim())
              .filter(t => t && t !== '');

            if (blockedBy.length === 0) {
              return true; // No dependencies
            }

            // Check if all dependencies are closed
            const allIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              per_page: 100
            });

            for (const dep of blockedBy) {
              const depIssue = allIssues.data.find(i =>
                i.title.includes(dep) || i.body.includes(`**Task ID:** ${dep}`)
              );

              if (!depIssue || depIssue.state !== 'closed') {
                console.log(`Dependency ${dep} not met`);
                return false;
              }
            }

            return true;

      - name: Assign to Copilot via GraphQL
        if: steps.check-deps.outputs.result == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;

            // Use GraphQL to assign Copilot
            // Note: This requires GitHub Copilot to be enabled for the repo
            const mutation = `
              mutation {
                updateIssue(input: {
                  id: "${issue.node_id}",
                  assigneeIds: ["MDQ6VXNlcjI3ODU1NzM="]
                }) {
                  issue {
                    id
                    number
                  }
                }
              }
            `;

            try {
              await github.graphql(mutation);
              console.log(`‚úÖ Assigned issue #${issue.number} to Copilot`);

              // Add comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `ü§ñ Assigned to GitHub Copilot for autonomous execution.\n\n` +
                      `Copilot will:\n` +
                      `1. Read context files\n` +
                      `2. Implement solution\n` +
                      `3. Write tests\n` +
                      `4. Create pull request\n\n` +
                      `Expected completion: ${getEstimatedTime(issue.body)}`
              });
            } catch (error) {
              console.log(`Failed to assign via GraphQL: ${error.message}`);
              console.log('Falling back to standard assignment...');

              // Fallback: Standard assignment
              await github.rest.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                assignees: ['github-copilot']
              });
            }

            function getEstimatedTime(body) {
              const match = body.match(/\*\*Estimated Time:\*\* (.+)/);
              return match ? match[1] : 'Unknown';
            }

  # Job 2: Auto-review PR from Copilot
  auto-review:
    if: |
      github.event_name == 'pull_request' &&
      (github.event.action == 'opened' || github.event.action == 'synchronize') &&
      contains(github.event.pull_request.labels.*.name, 'spec-kit-task')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Run tests
        run: dotnet test --no-build --verbosity normal --collect:"XPlat Code Coverage"

      - name: Check code coverage
        id: coverage
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Find coverage file
            const coverageFile = findCoverageFile('.');
            if (!coverageFile) {
              console.log('No coverage file found');
              return 0;
            }

            // Parse coverage (simplified - adjust for your coverage format)
            const coverage = parseCoverage(coverageFile);
            console.log(`Code coverage: ${coverage}%`);

            return coverage;

            function findCoverageFile(dir) {
              // Implement coverage file search
              return null;
            }

            function parseCoverage(file) {
              // Implement coverage parsing
              return 85;
            }

      - name: Check acceptance criteria
        id: check-criteria
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;

            // Get linked issue
            const issueMatch = pr.body.match(/#(\d+)/);
            if (!issueMatch) {
              console.log('No linked issue found');
              return false;
            }

            const issueNumber = parseInt(issueMatch[1]);
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });

            // Extract acceptance criteria
            const criteriaMatch = issue.data.body.match(/## Acceptance Criteria\n\n((?:- \[ \] .+\n)+)/);
            if (!criteriaMatch) {
              console.log('No acceptance criteria found');
              return true; // Assume OK if no criteria
            }

            const criteria = criteriaMatch[1]
              .split('\n')
              .filter(line => line.trim())
              .map(line => line.replace('- [ ] ', '').trim());

            console.log(`Found ${criteria.length} acceptance criteria`);

            // TODO: Implement automated criteria checking
            // For now, assume all met if tests pass
            return true;

      - name: Post review
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const coverage = ${{ steps.coverage.outputs.result }};
            const criteriaOk = ${{ steps.check-criteria.outputs.result }};

            let body = '## Automated Review\n\n';

            // Check if auto-merge eligible
            const labels = pr.labels.map(l => l.name);
            const autoMergeEligible = labels.includes('auto-merge-eligible');
            const requiresHumanReview = labels.includes('requires-human-review');

            // Build review body
            body += '### Checks\n\n';
            body += `- ‚úÖ Build: Passed\n`;
            body += `- ‚úÖ Tests: Passed\n`;
            body += `- ${coverage >= 85 ? '‚úÖ' : '‚ùå'} Coverage: ${coverage}% (threshold: 85%)\n`;
            body += `- ${criteriaOk ? '‚úÖ' : '‚ùå'} Acceptance Criteria: ${criteriaOk ? 'Met' : 'Not met'}\n`;

            const allPassed = coverage >= 85 && criteriaOk;

            if (autoMergeEligible && allPassed && !requiresHumanReview) {
              body += '\n### ‚úÖ Auto-Merge Eligible\n\n';
              body += 'This PR meets all criteria for automatic merge.\n';

              // Approve
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                event: 'APPROVE',
                body: body
              });
            } else if (requiresHumanReview) {
              body += '\n### üë§ Human Review Required\n\n';
              body += 'This task requires human review before merge.\n';

              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                event: 'COMMENT',
                body: body
              });
            } else {
              body += '\n### ‚ùå Issues Found\n\n';
              body += 'Please address the issues above before merge.\n';

              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                event: 'REQUEST_CHANGES',
                body: body
              });
            }

  # Job 3: Auto-merge approved PRs
  auto-merge:
    if: |
      (github.event_name == 'pull_request_review' && github.event.review.state == 'approved') ||
      (github.event_name == 'check_suite' && github.event.check_suite.conclusion == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Get PR details
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            let pr;
            if (context.eventName === 'pull_request_review') {
              pr = context.payload.pull_request;
            } else {
              // Get PR from check suite
              const prs = context.payload.check_suite.pull_requests;
              if (prs.length === 0) return null;
              pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prs[0].number
              });
              pr = pr.data;
            }
            return pr;

      - name: Check if auto-merge eligible
        id: check
        if: steps.pr.outputs.result != 'null'
        uses: actions/github-script@v7
        with:
          script: |
            const pr = ${{ steps.pr.outputs.result }};
            if (!pr) return false;

            const labels = pr.labels.map(l => l.name);

            // Check labels
            const autoMergeEligible = labels.includes('auto-merge-eligible');
            const requiresHumanReview = labels.includes('requires-human-review');

            if (!autoMergeEligible || requiresHumanReview) {
              console.log('Not eligible for auto-merge');
              return false;
            }

            // Check approvals
            const reviews = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });

            const approved = reviews.data.some(r => r.state === 'APPROVED');
            if (!approved) {
              console.log('No approval found');
              return false;
            }

            // Check status checks
            const checks = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.head.sha
            });

            const allPassed = checks.data.check_runs.every(
              c => c.conclusion === 'success' || c.conclusion === 'neutral'
            );

            if (!allPassed) {
              console.log('Not all checks passed');
              return false;
            }

            // Check if up to date
            const comparison = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: pr.base.ref,
              head: pr.head.ref
            });

            if (comparison.data.behind_by > 0) {
              console.log('Branch is behind base');
              // Update branch
              await github.rest.pulls.updateBranch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number
              });
              return false; // Wait for update
            }

            return true;

      - name: Merge PR
        if: steps.check.outputs.result == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const pr = ${{ steps.pr.outputs.result }};

            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                merge_method: 'squash',
                commit_title: `${pr.title} (#${pr.number})`,
                commit_message: `Automated merge of spec-kit task\n\n${pr.body}`
              });

              console.log(`‚úÖ Auto-merged PR #${pr.number}`);

              // Comment on PR
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `üéâ Automatically merged!\n\n` +
                      `All checks passed and PR was approved.\n` +
                      `Triggering next wave if dependencies met...`
              });

              // Trigger wave coordinator
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'wave-coordinator.yml',
                ref: 'main',
                inputs: {
                  pr_number: pr.number.toString()
                }
              });

            } catch (error) {
              console.log(`Failed to merge: ${error.message}`);

              // Comment on failure
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `‚ùå Auto-merge failed: ${error.message}\n\n` +
                      `Please merge manually.`
              });
            }
