version: '3'

# Unity-specific tasks (can be included in main Taskfile.yml if needed)

vars:
  UNITY_PROJECT: ./projects/client
  UNITY_VERSION_FILE: '{{.UNITY_PROJECT}}/ProjectSettings/ProjectVersion.txt'

tasks:
  # Unity project management
  open:
    desc: Open Unity project in editor
    cmds:
      - echo "Opening Unity project at {{.UNITY_PROJECT}}"
      - '{{if eq OS "windows"}}start "" "{{.UNITY_PROJECT}}"{{else if eq OS "darwin"}}open -a Unity "{{.UNITY_PROJECT}}"{{else}}echo "Please open Unity manually and load {{.UNITY_PROJECT}}"{{end}}'

  version:
    desc: Show Unity version for this project
    cmds:
      - cat "{{.UNITY_VERSION_FILE}}"
    preconditions:
      - test -f "{{.UNITY_VERSION_FILE}}"

  generate:
    desc: Generate Unity code (Entitas, Jenny, etc.)
    cmds:
      - echo "Running Unity code generation..."
      - echo "This typically runs automatically in Unity Editor"
      - echo "Check {{.UNITY_PROJECT}}/.properties files for configuration"

  validate:
    desc: Validate Unity project structure
    silent: true
    cmds:
      - echo "Validating Unity project structure..."
      - '{{if eq OS "windows"}}if exist "{{.UNITY_PROJECT}}\Assets" (echo ✓ Assets folder found) else (echo ✗ Assets folder missing && exit /b 1){{else}}if [ -d "{{.UNITY_PROJECT}}/Assets" ]; then echo "✓ Assets folder found"; else echo "✗ Assets folder missing"; exit 1; fi{{end}}'
      - '{{if eq OS "windows"}}if exist "{{.UNITY_PROJECT}}\ProjectSettings" (echo ✓ ProjectSettings folder found) else (echo ✗ ProjectSettings folder missing && exit /b 1){{else}}if [ -d "{{.UNITY_PROJECT}}/ProjectSettings" ]; then echo "✓ ProjectSettings folder found"; else echo "✗ ProjectSettings folder missing"; exit 1; fi{{end}}'
      - '{{if eq OS "windows"}}if exist "{{.UNITY_PROJECT}}\Packages" (echo ✓ Packages folder found) else (echo ✗ Packages folder missing && exit /b 1){{else}}if [ -d "{{.UNITY_PROJECT}}/Packages" ]; then echo "✓ Packages folder found"; else echo "✗ Packages folder missing"; exit 1; fi{{end}}'
      - echo "✓ Unity project structure is valid"

  clean:deep:
    desc: Deep clean Unity project (including Library)
    prompt: This will delete the Library folder which may take time to regenerate. Continue?
    cmds:
      - echo "Performing deep clean of Unity project..."
      - '{{if eq OS "windows"}}if exist "{{.UNITY_PROJECT}}\Library" rmdir /s /q "{{.UNITY_PROJECT}}\Library"{{else}}rm -rf "{{.UNITY_PROJECT}}/Library"{{end}}'
      - '{{if eq OS "windows"}}if exist "{{.UNITY_PROJECT}}\Temp" rmdir /s /q "{{.UNITY_PROJECT}}\Temp"{{else}}rm -rf "{{.UNITY_PROJECT}}/Temp"{{end}}'
      - '{{if eq OS "windows"}}if exist "{{.UNITY_PROJECT}}\obj" rmdir /s /q "{{.UNITY_PROJECT}}\obj"{{else}}rm -rf "{{.UNITY_PROJECT}}/obj"{{end}}'
      - echo "✓ Deep clean complete. Unity will regenerate Library on next open."

  cache:clear:
    desc: Clear Unity cache files
    cmds:
      - echo "Clearing Unity cache..."
      - '{{if eq OS "windows"}}del /s /q "{{.UNITY_PROJECT}}\*.csproj" 2>nul{{else}}find "{{.UNITY_PROJECT}}" -name "*.csproj" -delete{{end}}'
      - '{{if eq OS "windows"}}del /s /q "{{.UNITY_PROJECT}}\*.sln" 2>nul{{else}}find "{{.UNITY_PROJECT}}" -name "*.sln" -delete{{end}}'
      - echo "✓ Cache cleared. Unity will regenerate project files on next open."

  logs:
    desc: View Unity Editor logs
    cmds:
      - |
        {{if eq OS "windows"}}
          set LOG_PATH=%LOCALAPPDATA%\Unity\Editor\Editor.log
          if exist "%LOG_PATH%" (
            type "%LOG_PATH%"
          ) else (
            echo Unity log not found at %LOG_PATH%
          )
        {{else if eq OS "darwin"}}
          LOG_PATH="$HOME/Library/Logs/Unity/Editor.log"
          if [ -f "$LOG_PATH" ]; then
            cat "$LOG_PATH"
          else
            echo "Unity log not found at $LOG_PATH"
          fi
        {{else}}
          LOG_PATH="$HOME/.config/unity3d/Editor.log"
          if [ -f "$LOG_PATH" ]; then
            cat "$LOG_PATH"
          else
            echo "Unity log not found at $LOG_PATH"
          fi
        {{end}}

  platforms:
    desc: List supported Unity build platforms
    silent: true
    cmds:
      - echo "Supported Unity Build Platforms:"
      - echo "  • StandaloneWindows     - Windows 32-bit"
      - echo "  • StandaloneWindows64   - Windows 64-bit (default)"
      - echo "  • StandaloneOSX         - macOS"
      - echo "  • StandaloneLinux64     - Linux 64-bit"
      - echo "  • iOS                   - iOS devices"
      - echo "  • Android               - Android devices"
      - echo "  • WebGL                 - Web browsers"
      - echo "  • WSAPlayer             - Universal Windows Platform"
      - echo "  • PS4                   - PlayStation 4"
      - echo "  • XboxOne               - Xbox One"
      - echo "  • tvOS                  - Apple TV"
      - echo "  • Switch                - Nintendo Switch"
      - echo ""
      - echo "Usage: task build:unity --unity-build-target <platform>"
